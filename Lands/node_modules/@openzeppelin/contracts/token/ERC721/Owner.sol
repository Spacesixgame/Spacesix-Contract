// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Owner {
    
    struct EachNFT {
        uint16 level;
        uint16 count;
        uint256 amount;
        uint256 tokenId;
        string metaData;
    }

    struct Transaction {
        string metaData;
        address nftOwner;
        bool didStake;
        uint16 level;
        uint256 stakedTime;
        uint256 tokenId;
        uint256 amount;
        uint256 nftTokenId;
    }

    address public owner;
    uint256 public tokenId;
    mapping(uint256 => EachNFT) public AllNfts;
    mapping(uint256 => Transaction) public transactions;

    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner of this contract");
        _;
    }

    constructor() {
        owner = msg.sender;
        tokenId = 1;
    }



    function addOneNft(
        uint16 _level,
        uint16 _count,
        uint256 _amount,
        string calldata _metaData
    ) public onlyOwner {
        uint256 amount = _amount * 10**18;
        AllNfts[tokenId] = EachNFT(_level, _count, amount, tokenId, _metaData);
        tokenId += 1;
    }

    function addNfts(
        uint16 howMany,
        uint8 _plus,
        uint16 _level,
        uint16 _count,
        uint256 _amount,
        string[] calldata _metaDatas
    ) public onlyOwner {
        uint256 amount = _amount;
        for (uint256 c = 0; c < howMany; c++) {
            addOneNft(_level, _count, amount, _metaDatas[c]);
            amount += _plus;
        }
    }

    function changeOwner(address _newOwner) public onlyOwner {
        owner = _newOwner;
    }

    function changelandingsPrice(bool _increase,uint16 _level , uint8 _percent) public  onlyOwner {
        for (uint256 i = 1; i <= tokenId; i++) {
            EachNFT storage currentItem = AllNfts[i];
            if (currentItem.level == _level) {
                uint256 finalAmount = AllNfts[i].amount * _percent;
                finalAmount = finalAmount / 100;
                if (_increase == true) {
                    currentItem.amount = currentItem.amount + finalAmount;
                }else {
                    currentItem.amount = currentItem.amount - finalAmount;
                }
            }
        }
    }

    function changePlanetPrice(bool _increase,uint16 _planetTokenId , uint8 _percent) public  onlyOwner {
        EachNFT storage currentItem = AllNfts[_planetTokenId];
        uint256 finalAmount = AllNfts[_planetTokenId].amount * _percent;
        finalAmount = finalAmount / 100;
        if (_increase == true) {
            currentItem.amount = currentItem.amount + finalAmount;
        }else {
            currentItem.amount = currentItem.amount - finalAmount;
        }
    }
    
}
