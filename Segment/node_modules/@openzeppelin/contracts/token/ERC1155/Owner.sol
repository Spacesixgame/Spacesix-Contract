// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Owner {
    
    struct EachNFT {
        uint8 level;
        uint8 nftPart;
        uint256 tokenId;
        uint256 amount;
        string metaData;
    }

    struct Transaction {
        string metaData;
        address nftOwner;
        uint8 level;
        uint8 nftPart;
        uint256 amount;
        uint tokenId;
    }
    uint8 tokenID;
    address public owner;
    mapping(uint8 => EachNFT) public AllNfts;
    mapping(uint8 => mapping(uint8=>uint8)) public tokenMap;
    mapping(uint256 => Transaction) public transactions;
    mapping(uint8=>uint8)internal segmentCount;

    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner of this contract");
        _;
    }

    constructor() {
        owner = msg.sender;
    }



    function addNft(
        uint8 _level,
        uint8 _nftPart,
        uint256 _amount,
        string calldata _metaData
    ) external onlyOwner {
        uint256 amount = _amount * 10**18;
        tokenID++;
        AllNfts[tokenID] = EachNFT(_level,_nftPart,tokenID, amount, _metaData);
        segmentCount[_level]++;
        tokenMap[_level][_nftPart]=tokenID;
    }


    function changeOwner(address _newOwner) external onlyOwner {
        owner = _newOwner;
    }

    function changeSegmentPrice(bool _increase,uint8 _level , uint8 _percent) external  onlyOwner {

        for (uint8 i = 1; i <= tokenID; i++) {
            if(AllNfts[i].level==_level){
            EachNFT storage currentItem = AllNfts[i];
                uint256 finalAmount = AllNfts[i].amount * _percent;
                finalAmount = finalAmount / 100+1e17;
                finalAmount=(finalAmount*1e18)/1e18;
                if (_increase == true) {
                    currentItem.amount = currentItem.amount + finalAmount;
                    
                }else {
                    currentItem.amount = currentItem.amount - finalAmount;
                }
                    currentItem.amount = currentItem.amount/1e17*1e17;

            }
        }
    }
    
}
